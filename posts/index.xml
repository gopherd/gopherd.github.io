<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on</title><link>https://gopherd.com/posts/</link><description>Recent content in Posts on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 10 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://gopherd.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 绘图库 matplotlib 介绍</title><link>https://gopherd.com/posts/python/matplotlib/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/python/matplotlib/</guid><description>1. 安装 使用 pip 安装
pip install matplotlib # 如果你的 pip 命令不能存在可能需要使用 pip3 pip3 install matplotlib 或使用 conda 安装
conda install matplotlib 官方文档 &amp;gt;
2. 绘图类型 matplotlib 支持很多种类型的图形绘制，下面介绍一些常见类型。
2.1. plot &amp;gt; Axes.plot(*args, scalex=True, scaley=True, data=None, **kwargs)
Plot y versus x as lines and/or markers.
plot 方法绘制函数 y = f(x) 的曲线或对应标记。
import matplotlib.pyplot as plt import numpy as np # make data x = np.linspace(-1, 1, 100) y = x*x fig, ax = plt.</description></item><item><title>阿里云 CDN 配置 Let's Encrypt 证书</title><link>https://gopherd.com/posts/notes/aliyun-cdn-lets-encrypt/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/notes/aliyun-cdn-lets-encrypt/</guid><description>以下假定需要配置的域名为 www.example.com，首先该域名需要先备案。</description></item><item><title>Python 学习笔记</title><link>https://gopherd.com/posts/python/learning-notes/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/python/learning-notes/</guid><description>主要教程 Python 教程 切片 对列表的索引支持负数，但不可以越界，而切片参数则可以为负数，也可以越界。 squares = [1, 4, 9, 16, 25] print(&amp;#34;squares:&amp;#34;, squares) print(squares[0]) print(squares[-1]) #bad: 5 out of range, try uncomment it and run #print(squares[5]) print(squares[0:5]) print(squares[0:-1]) 循环 for-else 语法的 else 分支在 for 循环正常结束时（即没有 break）触发 for i in range(10): if i == 5: print(&amp;#34;break for&amp;#34;) break else: print(&amp;#34;for-else brach executed&amp;#34;) pass 语句: 语法上需要一个语句，但程序不实际执行任何动作时，可以使用该语句。 def funA(): pass match 语句: 与其他语言的 switch 相似，但可以在 case 字句中使用 | 符号匹配多个，使用 _ 代表 default 分支，case 分支还可以在后面加 if 条件语句。 match status: case 401 | 403 | 404: return &amp;#34;Not allowed&amp;#34; # point is an (x, y) tuple match point: case (0, 0): print(&amp;#34;Origin&amp;#34;) case (0, y): print(f&amp;#34;Y={y}&amp;#34;) case (x, 0): print(f&amp;#34;X={x}&amp;#34;) case (x, y) if x == y: print(f&amp;#34;X=Y={x}&amp;#34;) case (x, y): print(f&amp;#34;X={x}, Y={y}&amp;#34;) case _: raise ValueError(&amp;#34;Not a point&amp;#34;) 函数 在 python 的函数参数中存在位置参数，关键值参数，元组参数，字典参数。 参数调用方式又存在 3 种约束：仅按位置，按位置或关键字，仅按关键字。 关键值参数必须在位置参数之后，关键值参数之间的顺序无关紧要。 lambda 关键字用于创建匿名函数，匿名函数只能是单个表达式。</description></item><item><title>数据结构</title><link>https://gopherd.com/posts/computer/data-structures/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/computer/data-structures/</guid><description/></item><item><title>获取 B 站加权评分的番剧排行榜</title><link>https://gopherd.com/posts/life/bilibili-anime-list/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/life/bilibili-anime-list/</guid><description>package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;sort&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; ) const urlTemplate = &amp;#34;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;amp;spoken_language_type=-1&amp;amp;area=-1&amp;amp;is_finish=-1&amp;amp;copyright=-1&amp;amp;season_status=-1&amp;amp;season_month=-1&amp;amp;year=-1&amp;amp;style_id=-1&amp;amp;order=%d&amp;amp;st=1&amp;amp;sort=0&amp;amp;page=1&amp;amp;season_type=1&amp;amp;pagesize=%d&amp;amp;type=1&amp;#34; const ( byScore = 4 byFavorites = 3 byPlay = 2 ) type Media struct { Id int Title string Score float64 Favorites float64 Play float64 Season int Weight float64 } func (m *Media) calculateWeightedScore(maxFavorites, maxPlay float64) { const scoreWeight = 0.</description></item><item><title>Go 泛型初步</title><link>https://gopherd.com/posts/go/generic-get-started/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/go/generic-get-started/</guid><description>1. Go 的泛型 长期以来 go 都没有泛型的概念，只有接口 interface 偶尔类似的充当泛型的作用，然而接口终究无法满足一些基本的泛型需求，比如
(1). 函数体内需要对参数做运算而不是使用接口方法，如下的写法连编译都不可行。
// Sum 函数尝试对输入的任意多个参数求和。 // 然而 interface{} 不可以做加法，这段代码是不能编译的 func Sum(values ...interface{}) interface{} { var sum interface{} for _, v := range values { sum += v } return sum } (2). 使用接口常常存在极其令人厌恶的接口转换，一个例子是标准库 container/heap。Pop 方法返回值几乎总是需要在逻辑上再转换为 Push 时传入的类型，这使得代码不仅丑陋而且低效（曾经因为 interface{} 实际是 int 类型，但是因为类型转换导致大量的内存分配次数）
// Push pushes the element x onto the heap. // The complexity is O(log n) where n = h.</description></item></channel></rss>