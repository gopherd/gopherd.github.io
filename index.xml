<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://gopherd.com/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 07 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://gopherd.com/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构</title><link>https://gopherd.com/posts/computer/data-structures/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/computer/data-structures/</guid><description/></item><item><title>获取 B 站加权评分的番剧排行榜</title><link>https://gopherd.com/posts/life/bilibili-anime-list/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/life/bilibili-anime-list/</guid><description>package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;sort&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; ) const urlTemplate = &amp;#34;https://api.bilibili.com/pgc/season/index/result?season_version=-1&amp;amp;spoken_language_type=-1&amp;amp;area=-1&amp;amp;is_finish=-1&amp;amp;copyright=-1&amp;amp;season_status=-1&amp;amp;season_month=-1&amp;amp;year=-1&amp;amp;style_id=-1&amp;amp;order=%d&amp;amp;st=1&amp;amp;sort=0&amp;amp;page=1&amp;amp;season_type=1&amp;amp;pagesize=%d&amp;amp;type=1&amp;#34; const ( byScore = 4 byFavorites = 3 byPlay = 2 ) type Media struct { Id int Title string Score float64 Favorites float64 Play float64 Season int Weight float64 } func (m *Media) calculateWeightedScore(maxFavorites, maxPlay float64) { const scoreWeight = 0.</description></item><item><title>Go 泛型初步</title><link>https://gopherd.com/posts/go/generic-get-started/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/posts/go/generic-get-started/</guid><description>1. Go 的泛型 长期以来 go 都没有泛型的概念，只有接口 interface 偶尔类似的充当泛型的作用，然而接口终究无法满足一些基本的泛型需求，比如
(1). 函数体内需要对参数做运算而不是使用接口方法，如下的写法连编译都不可行。
// Sum 函数尝试对输入的任意多个参数求和。 // 然而 interface{} 不可以做加法，这段代码是不能编译的 func Sum(values ...interface{}) interface{} { var sum interface{} for _, v := range values { sum += v } return sum } (2). 使用接口常常存在极其令人厌恶的接口转换，一个例子是标准库 container/heap。Pop 方法返回值几乎总是需要在逻辑上再转换为 Push 时传入的类型，这使得代码不仅丑陋而且低效（曾经因为 interface{} 实际是 int 类型，但是因为类型转换导致大量的内存分配次数）
// Push pushes the element x onto the heap. // The complexity is O(log n) where n = h.</description></item><item><title>Playground</title><link>https://gopherd.com/tools/playground/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/tools/playground/</guid><description>ada assembly bash c clojure cobol c++ c# D elixir erlang fortran f# go groovy haskell java javascript jshell kotlin lisp lua mongodb mysql ocaml octave pascal perl php postgresql prolog python R racket redis rust scala sqlite swift tcl typescript vb by #
document.addEventListener('DOMContentLoaded',function(){ var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle')) var dropdownList = dropdownElementList.map(function (dropdownToggleEl) { return new bootstrap.Dropdown(dropdownToggleEl); }) if (window.codeblock) { var codes = {}; document.</description></item><item><title>关于</title><link>https://gopherd.com/about/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://gopherd.com/about/</guid><description>暂时没有内容!</description></item></channel></rss>